---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/Logo.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import SelectLocale from '~/components/common/SelectLocale.astro'
import Button from '~/components/ui/Button.astro';

import { getHomePermalink } from '~/utils/permalinks';
import { trimSlash, getAsset } from '~/utils/permalinks';
import type { CallToAction } from '~/types';

import { getImage } from "astro:assets";
import bgImage from '~/assets/images/header/11_header.png';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface ActionLink extends CallToAction {}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<ActionLink>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = 'header',
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = 'center',
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
const optimizedBackground = await getImage({src: bgImage, format: 'png'});
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    'top-0 z-40 flex-none mx-auto w-full border-none transition-[opacity] ease-in-out',
    'after:absolute after:-z-10 after:w-full after:hidden after:md:block after:h-[16px] after:[background:var(--pragma-header-bg)_top_center_scroll_repeat]',
    '[border-bottom:1px_solid_#2abb9b] md:border-none'
  ]}
  style={`--pragma-header-bg: url(${optimizedBackground.src});`}
  {...isSticky ? { 'data-aw-sticky-header': true } : {}}
  {...id ? { id } : {}}
>
  <div class:list={[
    'absolute inset-0 bg-[#464646] md:backdrop-blur-md [box-shadow:0_0.375rem_1.5rem_0_rgb(140_152_164/13%)]',
    'md:dark:bg-[#030621e6] dark:border-b dark:border-gray-500/20 dark:[box-shadow:none]'
  ]}></div>
  <div
    class:list={[
      'relative text-default mx-auto w-full',
      {
        'md:flex md:justify-between': position !== 'center',
      },
      {
        'md:grid md:grid-cols-3 md:items-center': position === 'center',
      },
      {
        'max-w-[970px]': !isFullWidth,
      },
    ]}
  >
    <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'min-h-[50px]', 'flex justify-between flex-row-reverse md:flex-row']}>
      <a class="flex items-center ml-2 rtl:ml-0 rtl:mr-2" href={getHomePermalink(Astro.currentLocale)}>
        <Logo />
      </a>
      <div class="flex items-center md:hidden">
        <ToggleMenu class="flex flex-col h-10 w-10 sm:h-12 sm:w-12 rounded justify-center items-center cursor-pointer group *:bg-white"/>
      </div>
    </div>
    <nav
      class="main-nav items-center w-full md:w-auto hidden md:flex md:mx-5 text-[#999] font-secondary uppercase overflow-y-auto overflow-x-hidden md:overflow-visible md:justify-self-center"
      aria-label="Main navigation"
    >
      <ul
        class="flex flex-col text-nowrap md:flex-row md:self-center w-full md:w-auto text-xl md:text-[1rem] leading-[20px] tracking-[0.01rem] font-normal md:justify-center"
      >
        {
          links.map(({ text, href, links }) => (
            <li class={`relative ${links?.length ? 'dropdown' : ''}`}>
              {links?.length ? (
                <>
                  <button type="button" class="hover:text-link dark:hover:text-white px-4 py-3 flex items-center">
                    {text}{' '}
                    <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden md:inline" />
                  </button>
                  <ul class="dropdown-menu md:backdrop-blur-md dark:md:bg-dark rounded md:absolute pl-4 md:pl-0 md:hidden font-normal md:bg-white/90 md:min-w-[200px] drop-shadow-xl">
                    {links.map(({ text: text2, href: href2 }) => (
                      <li>
                        <a
                          class:list={[
                            'first:rounded-t last:rounded-b md:hover:bg-gray-100 hover:text-link dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 block whitespace-no-wrap',
                            { 'aw-link-active': href2 === currentPath },
                          ]}
                          href={href2}
                        >
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={[
                    'hover:text-link dark:hover:text-white p-[17px_8px_18px_8px] flex items-center border-none',
                    { 'aw-link-active': href === currentPath },
                  ]}
                  href={href}
                >
                  {text}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>
    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'hidden md:self-center md:flex items-center md:mb-0 fixed w-full md:w-auto md:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 md:p-0 md:justify-self-end',
      ]}
    >
      <div class="items-center flex justify-between w-full md:w-auto">
        <div class="flex">
          {showToggleTheme && <ToggleTheme iconClass="w-6 h-6 md:w-5 md:h-5 md:inline-block" />}
          {
            showRssFeed && (
              <a
                class="text-[#999] dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 inline-flex items-center"
                aria-label="RSS Feed"
                href={getAsset('/rss.xml')}
              >
                <Icon name="tabler:rss" class="w-5 h-5" />
              </a>
            )
          }
          <SelectLocale class:list={[
            "mr-2 rtl:mr-0 rtl:ml-2 font-secondary text-[#999] text-[1rem] uppercase hover:text-link dark:hover:text-white flex items-center",
            "*:p-[17px_8px_13px_8px]"
          ]}/>
        </div>
        {
          actions?.length ? (
            <span class="ml-4 rtl:ml-0 rtl:mr-4">
              {actions.map((btnProps) => (
                <Button {...btnProps} class="ml-2 py-2.5 px-5.5 md:px-6 font-semibold shadow-none text-sm w-auto" />
              ))}
            </span>
          ) : (
            ''
          )
        }
      </div>
    </div>
  </div>
</header>

<nav
  class="relative bg-[#464646] pb-[4px] mobile-nav closed items-center w-full md:w-auto md:mx-5 text-[#999] font-secondary uppercase overflow-y-auto overflow-x-hidden md:overflow-visible md:justify-self-center"
  aria-label="Mobile navigation"
  data-aw-click-menu
>
  <ul
    class="bg-[#5a5a5a] flex flex-col text-nowrap md:flex-row md:self-center w-full md:w-auto text-xl md:text-[1rem] leading-[20px] tracking-[0.01rem] font-normal md:justify-center"
  >
    {
      links.map(({ text, href, links }) => (
        <li class={`relative ${links?.length ? 'dropdown' : ''}`}>
          <a
            class:list={[
              'hover:text-link dark:hover:text-white p-[17px_8px_13px_8px] flex items-center [border-bottom:1px_solid_#747474]',
              { 'aw-link-active': href === currentPath },
            ]}
            href={href}
          >
            {text}
          </a>
        </li>
      ))
    }
  </ul>
  <SelectLocale class:list={[
    "font-secondary text-[#999] leading-[20px] text-xl uppercase hover:text-link dark:hover:text-white flex items-center",
    "absolute right-0 top-0 *:p-[17px_20px_13px] *:[border-left:1px_solid_#747474]"
  ]}/>
</nav>

<style>
  .main-nav {
    --underline-width: 0;
    --underline-offset-x: 0;
    @apply relative;

    @apply after:hidden md:after:block after:absolute;
    @apply after:inset-x-0 after:bottom-[2px] after:h-[5px] after:bg-[#2abb9b];
    @apply after:w-[var(--underline-width)];
    @apply after:[transform:translateX(var(--underline-offset-x))];
    @apply after:[transition:transform_0.5s,width_0.5s];

  }
  .main-nav a {
    @apply [transition:color_0.5s];
  }
  .active {
    @apply text-white;
  }
  .mobile-nav {
    overflow: hidden;
    transition: all 0.5s ease-in-out;
    max-height: 100vh;
  }
  .mobile-nav.closed {
    max-height: 0;
    padding: 0;
  }
</style>
